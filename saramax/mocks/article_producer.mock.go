// Code generated by MockGen. DO NOT EDIT.
// Source: ./producer.go
//
// Generated by this command:
//
//	mockgen -source=./producer.go -package=eventmock -destination=./mocks/article_producer.mock.go Producer
//

// Package eventmock is a generated GoMock package.
package eventmock

import (
	context "context"
	reflect "reflect"

	saramax "github.com/Kirby980/study/webook/pkg/saramax"
	gomock "go.uber.org/mock/gomock"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
	isgomock struct{}
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// BatchProducerReadEvent mocks base method.
func (m *MockProducer) BatchProducerReadEvent(ctx context.Context, evt saramax.ReadEvents, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchProducerReadEvent", ctx, evt, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchProducerReadEvent indicates an expected call of BatchProducerReadEvent.
func (mr *MockProducerMockRecorder) BatchProducerReadEvent(ctx, evt, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchProducerReadEvent", reflect.TypeOf((*MockProducer)(nil).BatchProducerReadEvent), ctx, evt, topic)
}

// ProducerReadEvent mocks base method.
func (m *MockProducer) ProducerReadEvent(ctx context.Context, evt saramax.ReadEvent, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProducerReadEvent", ctx, evt, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProducerReadEvent indicates an expected call of ProducerReadEvent.
func (mr *MockProducerMockRecorder) ProducerReadEvent(ctx, evt, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProducerReadEvent", reflect.TypeOf((*MockProducer)(nil).ProducerReadEvent), ctx, evt, topic)
}
